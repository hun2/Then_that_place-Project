<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 <mapper namespace="com.FirstProject.daily.dao.DailyDAO">
 
 	<select id="selectUSerAll" resultType="com.FirstProject.login.model.User">
 		SELECT
 			*
 		FROM
 			`user`
 		WHERE
 			`userId` NOT IN ( SELECT userId_followed from `follow` where userId_follower = #{userId})
 		AND
 			`userId` != #{userId}
 		LIMIT 5
 	</select>
 	<insert id="insertDaily" parameterType="com.FirstProject.daily.model.Daily" >
 		INSERT INTO `daily`
 		(
			`userId`
			,`dailySubject`
			,`dailyContent`
			,`dailyCreatedAt`
			,`dailyUpdatedAt`
 		)
 		VALUES
 		(
 			#{userId}
 			,#{dailySubject}
 			,#{dailyContent}
 			, NOW()
 			, NOW()
 		)
 		
 		
 		<selectKey resultType="int" keyProperty="id" order="AFTER">
 			SELECT LAST_INSERT_ID()
 		</selectKey>
 	</insert>
 	
 	<insert id="insertImage" parameterType="com.FirstProject.common.DailyImage">
 		
 		
 		INSERT INTO `dailyimage`
 		(
			`dailyId`
			,`imagePath`
			,`imageCreatedAt`
			,`imageUpdatedAt`
 		)
 		VALUES
 		<foreach collection="imagePath" index='index' item="pathList" separator=",">
 		(
 			#{dailyId}
 			,#{pathList}
 			, NOW()
 			, NOW()
 		)
 		</foreach>
 	</insert>
 	
 	<select id="selectList" resultType="com.FirstProject.daily.model.Daily" parameterType="map">
 		SELECT
 			*
 		FROM
 			`daily`
 		where userId = #{userId}
 		ORDER BY dailyCreatedAt DESC
 		LIMIT #{startNum}, #{endNum}
 	</select>
 	
 	<select id="selectListLimit3" resultType="com.FirstProject.daily.model.Daily" parameterType="string">
 		SELECT
 			*
 		FROM
 			`daily`
 		where userId = #{userId}
 		ORDER BY dailyCreatedAt DESC
 		LIMIT 3
 	</select>
 	
 	<select id="selectDailyByDailyIdandUserId" resultType="com.FirstProject.daily.model.Daily" parameterType="map">
 		SELECT
 			`id`
			,`userId`
			,`dailySubject`
			,`dailyContent`
			,`dailyCreatedAt`
			,`dailyUpdatedAt`
 		FROM
 			daily
 		WHERE
 			`id` = #{dailyId}
 		AND	
 			`userId` = #{userId}
 	</select>
 	
 	<select id="selectDailyByDaily" resultType="com.FirstProject.daily.model.Daily" parameterType="int">
 		SELECT
 			`id`
			,`userId`
			,`dailySubject`
			,`dailyContent`
			,`dailyCreatedAt`
			,`dailyUpdatedAt`
 		FROM
 			daily
 		WHERE
 			`id` = #{dailyId}
 	
 	</select>
 	
 	<update id="updateDailyListById" parameterType="com.FirstProject.daily.model.Daily">
 		UPDATE `daily`
 		SET
			<if test="dailySubject != null and !dailySubject.equals('')">
			`dailySubject` = #{dailySubject}
			</if>
			<if test="dailyContent != null and !dailyContent.equals('')">
			,`dailyContent` = #{dailyContent}
			</if>
			,`dailyUpdatedAt` = NOW()
 		WHERE
 			`id` = #{id}
 	
 	</update>
 	<delete id="deleteDailyListById" parameterType="int">
 		DELETE FROM `daily`
 		WHERE
 			`id` = #{id}
 	</delete>
 	
 	<select id="selectOtherList" parameterType="map" resultType="com.FirstProject.daily.model.Daily">
 		SELECT
 			*
 		FROM
 			`daily`
 		WHERE `userId` in 
 		(SELECT USERID_FOLLOWED FROM `follow` WHERE USERID_FOLLOWER = #{userId} )
 		ORDER BY dailyCreatedAt DESC
 		LIMIT #{startNum}, #{endNum}
 	</select>
 	
 	<select id="selectOtherPlaceList" parameterType="map" resultType="com.FirstProject.goodplace.model.Place">
 		SELECT
 			*
 		FROM
 			`place`
 		WHERE 
 			`placeWhether` = 'g'
 		AND
 		`userId` in 
 		(SELECT USERID_FOLLOWED FROM `follow` WHERE USERID_FOLLOWER = #{userId} )
 		ORDER BY placeCreatedAt DESC
 		LIMIT #{startNum}, #{endNum}
 	</select>
 	
 	<select id="selectOtherBadPlaceList" parameterType="map" resultType="com.FirstProject.goodplace.model.Place">
 		SELECT
 			*
 		FROM
 			`place`
 		WHERE 
 			`placeWhether` = 'b'
 		AND
 		`userId` in 
 		(SELECT USERID_FOLLOWED FROM `follow` WHERE USERID_FOLLOWER = #{userId} )
 		ORDER BY placeCreatedAt DESC
 		LIMIT #{startNum}, #{endNum}
 	</select>
 	
 </mapper>